[package]
name = "riot-rs-embassy"
version = "0.1.0"
license.workspace = true
edition = "2021"

[lints]
workspace = true

[dependencies]
const_panic.workspace = true
critical-section.workspace = true
linkme.workspace = true
static_cell.workspace = true
cfg-if.workspace = true

embassy-embedded-hal = { workspace = true, optional = true }
embassy-executor = { workspace = true, features = ["nightly"] }
embassy-hal-internal = { workspace = true }
embassy-net = { workspace = true, optional = true, features = [
  "dhcpv4",
  "medium-ethernet",
] }
embassy-sync = { workspace = true }
embassy-time = { workspace = true, optional = true }
embassy-usb = { workspace = true, optional = true }

embedded-hal = { workspace = true }
embedded-hal-async = { workspace = true }

riot-rs-embassy-common = { workspace = true }
riot-rs-threads = { path = "../riot-rs-threads", optional = true }
riot-rs-debug = { workspace = true }
riot-rs-macros = { path = "../riot-rs-macros" }
riot-rs-rt = { path = "../riot-rs-rt" }
riot-rs-random = { path = "../riot-rs-random", optional = true }
riot-rs-utils = { workspace = true }

heapless = "0.8.0"
once_cell = { workspace = true }

# ISA-specific
[target.'cfg(context = "cortex-m")'.dependencies]
embassy-executor = { workspace = true, default-features = false, features = [
  "arch-cortex-m",
] }

# Manufacturer-specific
[target.'cfg(context = "esp")'.dependencies]
riot-rs-esp = { path = "../riot-rs-esp" }

[target.'cfg(context = "nrf")'.dependencies]
riot-rs-nrf = { path = "../riot-rs-nrf" }

[target.'cfg(context = "rp")'.dependencies]
riot-rs-rp = { path = "../riot-rs-rp" }

[target.'cfg(context = "stm32")'.dependencies]
riot-rs-stm32 = { workspace = true }

[features]
## Enables GPIO interrupt support.
external-interrupts = [
  "riot-rs-embassy-common/external-interrupts",
  "riot-rs-esp/external-interrupts",
  "riot-rs-nrf/external-interrupts",
  "riot-rs-rp/external-interrupts",
  "riot-rs-stm32/external-interrupts",
]
time = ["dep:embassy-time", "embassy-executor/integrated-timers"]

## Enables I2C support.
i2c = [
  "dep:embassy-embedded-hal",
  "riot-rs-embassy-common/i2c",
  "riot-rs-esp/i2c",
  "riot-rs-nrf/i2c",
  "riot-rs-rp/i2c",
  "riot-rs-stm32/i2c",
]
usb = [
  "dep:embassy-usb",
  "riot-rs-nrf/usb",
  "riot-rs-rp/usb",
  "riot-rs-stm32/usb",
]
# embassy-net requires embassy-time and support for timeouts in the executor
net = ["dep:embassy-net", "time"]
usb-ethernet = ["usb", "net"]
## Use a hardware RNG to seed into the riot-rs-random system-wide RNG
hwrng = ["riot-rs-nrf/hwrng", "riot-rs-rp/hwrng", "riot-rs-stm32/hwrng"]

wifi = []
wifi-cyw43 = ["riot-rs-rp/wifi-cyw43", "net", "wifi"]
wifi-esp = ["riot-rs-esp/wifi-esp", "net", "wifi"]

threading = ["dep:riot-rs-threads"]
override-network-config = []
override-usb-config = []

executor-single-thread = [
  "riot-rs-rt/executor-single-thread",
  "riot-rs-esp/executor-single-thread",
]
executor-interrupt = [
  "riot-rs-nrf/executor-interrupt",
  "riot-rs-rp/executor-interrupt",
  "riot-rs-stm32/executor-interrupt",
]
executor-thread = ["threading"]
executor-none = []

defmt = [
  "embassy-net?/defmt",
  "embassy-time?/defmt",
  "embassy-usb?/defmt",
  "riot-rs-esp/defmt",
  "riot-rs-nrf/defmt",
  "riot-rs-rp/defmt",
  "riot-rs-stm32/defmt",
]
