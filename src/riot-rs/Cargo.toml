[package]
name = "riot-rs"
version.workspace = true
authors.workspace = true
license.workspace = true
edition.workspace = true

[lints]
workspace = true

[dependencies]
document-features = { workspace = true }
linkme = { workspace = true }
riot-rs-bench = { workspace = true, optional = true }
riot-rs-boards = { path = "../riot-rs-boards" }
riot-rs-debug = { workspace = true }
riot-rs-embassy = { path = "../riot-rs-embassy" }
riot-rs-macros = { path = "../riot-rs-macros" }
riot-rs-random = { workspace = true, optional = true }
riot-rs-rt = { path = "../riot-rs-rt" }
riot-rs-sensors = { workspace = true, optional = true }
riot-rs-threads = { path = "../riot-rs-threads", optional = true }
riot-rs-utils = { workspace = true }
static_cell = { workspace = true }

[features]
default = ["riot-rs-rt/_panic-handler"]

#! ## System functionality
## Enables GPIO interrupt support.
external-interrupts = ["riot-rs-embassy/external-interrupts"]
## Enables threading support, see the [`macro@thread`] attribute macro.
threading = [
  "dep:riot-rs-threads",
  "riot-rs-rt/threading",
  "riot-rs-embassy/threading",
]
## Enables support for timeouts in the internal executor---required to use
## `embassy_time::Timer`.
time = ["riot-rs-embassy/time"]
## Enables the [`random`] module.
random = ["riot-rs-random"]
## Enables a cryptographically secure random number generator in the [`random`] module.
csprng = ["riot-rs-random/csprng"]
## Enables seeding the random number generator from hardware.
hwrng = ["riot-rs-embassy/hwrng"]
## Enables support for sensors.
## *Currently experimental.*
sensors = ["dep:riot-rs-sensors"]

#! ## Serial communication
## Enables I2C support.
i2c = ["riot-rs-embassy/i2c"]
## Enables USB support.
usb = ["riot-rs-embassy/usb"]

#! ## System configuration
#! The [`macro@config`] attribute macro allows to provide configuration for
#! specific system functionality.
#! The features below need to be enabled so that the provided custom
#! configuration is taken into account.
## Enables custom network configuration.
override-network-config = ["riot-rs-embassy/override-network-config"]
## Enables custom USB configuration.
override-usb-config = ["riot-rs-embassy/override-usb-config"]

#! ## Network type selection
#! At most one of the features below can be enabled at once.
#! These features are normally automatically selected by
#! [laze](https://github.com/kaspar030/laze) based on what the board supports,
#! and don't need to be selected manually.
## Selects Ethernet over USB (USB CDC-NCM).
usb-ethernet = ["riot-rs-embassy/usb-ethernet"]
## Selects Wi-Fi (with the CYW43 chip).
wifi-cyw43 = ["riot-rs-embassy/wifi-cyw43"]
## Selects Wi-Fi (on ESP chips).
wifi-esp = ["riot-rs-embassy/wifi-esp"]

#! ## Development and debugging
## Enables the debug console, required to use
## [`println!`](riot_rs_debug::println).
debug-console = ["riot-rs-rt/debug-console"]
## Enables logging support through `defmt`.
defmt = [
  "riot-rs-debug/defmt",
  "riot-rs-embassy/defmt",
  "riot-rs-threads?/defmt",
  "riot-rs-bench?/defmt",
]
## Enables benchmarking facilities.
bench = ["dep:riot-rs-bench"]
## Prints nothing in case of panics (may help reduce binary size).
silent-panic = ["riot-rs-rt/silent-panic"]
## Allows to have no boards selected, useful to run target-independent tooling.
no-boards = ["riot-rs-boards/no-boards", "executor-none"]

net = ["riot-rs-embassy/net"]

#! ## Executor type selection for the (autostarted) main executor
#! Exactly one of the features below must be enabled at once.
## Enables the interrupt executor.
executor-interrupt = ["riot-rs-embassy/executor-interrupt"]
## Enables the single thread-mode executor.
executor-single-thread = ["riot-rs-embassy/executor-single-thread"]
## Enables the riot-rs-threading thread executor.
executor-thread = ["riot-rs-embassy/executor-thread", "threading"]
# Don't start any executor automatically.
# *Used for internal testing only.*
executor-none = ["riot-rs-embassy/executor-none"]
